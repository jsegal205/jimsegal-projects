{"version":3,"sources":["pages/recipes/index.js","utils/index.js","pages/not-found/index.js","pages/recipe/index.js","pages/home/index.js","serviceWorker.js","index.js","App.js"],"names":["Recipes","useState","recipes","setRecipes","useEffect","axios","get","then","data","length","map","recipe","key","slug","to","pathname","state","title","NotFound","Recipe","props","setRecipe","pathNameSplit","split","getSlug","location","catch","response","status","referenceLink","ingredients","directions","href","target","rel","className","source","Home","Boolean","window","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"uRAsCeA,EA/BC,WAAO,IAAD,EACUC,qBADV,mBACbC,EADa,KACJC,EADI,KAQpB,OANAC,qBAAU,WACRC,IAAMC,IAAN,UCVsB,2BDUtB,aAAmCC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACzCL,EAAWK,QAEZ,IAEIN,GAAWA,EAAQO,OACxB,iCACE,uCACA,4BACGP,EAAQQ,KAAI,SAAAC,GAAM,OACjB,wBAAIC,IAAKD,EAAOE,MACd,kBAAC,IAAD,CACEC,GAAI,CACFC,SAAS,WAAD,OAAaJ,EAAOE,MAC5BG,MAAM,eAAML,KAGbA,EAAOM,aAOlB,gD,iBE7BWC,G,OAFE,kBAAM,2CCiERC,EA/CA,SAAAC,GAAU,IAAD,EACMnB,qBADN,mBACfU,EADe,KACPU,EADO,KAEhBR,EAbQ,SAAC,GAAyB,IAAvBE,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC3B,GAAIA,GAASA,EAAMH,KAEjB,OAAOG,EAAMH,KAIf,IAAMS,EAAgBP,EAASQ,MAAM,KACrC,OAAOD,EAAcA,EAAcb,OAAS,GAK/Be,CAAQJ,EAAMK,UAe3B,GAbArB,qBAAU,WACRC,IACGC,IADH,UF1BsB,2BE0BtB,mBAC+BO,IAC5BN,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPa,EAAUb,MAEXkB,OAAM,YAAmB,IAAhBC,EAAe,EAAfA,SACgB,MAApBA,EAASC,QACXP,EAAU,CAAEO,OAAQD,EAASC,cAGlC,CAACf,KAECF,EACH,OAAO,+CAGT,GAAsB,MAAlBA,EAAOiB,OACT,OAAO,kBAAC,EAAD,MAtBa,IAyBdX,EAAkDN,EAAlDM,MAAOY,EAA2ClB,EAA3CkB,cAAeC,EAA4BnB,EAA5BmB,YAAaC,EAAepB,EAAfoB,WAE3C,OACE,iCACE,4BAAKd,GACL,+BACE,uBAAGe,KAAMH,EAAeI,OAAO,SAASC,IAAI,uBAA5C,uBAIF,2CACA,yBAAKC,UAAU,eACb,kBAAC,IAAD,CAAeC,OAAQN,KAEzB,0CACA,yBAAKK,UAAU,cACb,kBAAC,IAAD,CAAeC,OAAQL,OCzDhBM,EAFF,kBAAM,qCCSCC,QACW,cAA7BC,OAAOd,SAASe,UAEe,UAA7BD,OAAOd,SAASe,UAEhBD,OAAOd,SAASe,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCID,WACb,OACE,oCACE,gCACE,mDAEF,kBAAC,IAAD,KACE,iCACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAM7B,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,cAKN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8B,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAK,WAAWC,UAAW9C,IAClC,kBAAC,IAAD,CAAO6C,KAAK,sBAAsBC,UAAW3B,IAC7C,kBAAC,IAAD,CAAO0B,KAAK,IAAIC,UAAW5B,UD3BvB,MAAS6B,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEd3B,OAAM,SAAA4B,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.930cdd04.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { apiUrlBase } from \"../../utils\";\nimport \"../../App.css\";\n\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst Recipes = () => {\n  const [recipes, setRecipes] = useState();\n  useEffect(() => {\n    axios.get(`${apiUrlBase}/recipes`).then(({ data }) => {\n      setRecipes(data);\n    });\n  }, []);\n\n  return recipes && recipes.length ? (\n    <section>\n      <h1>Recipes</h1>\n      <ul>\n        {recipes.map(recipe => (\n          <li key={recipe.slug}>\n            <Link\n              to={{\n                pathname: `/recipe/${recipe.slug}`,\n                state: { ...recipe }\n              }}\n            >\n              {recipe.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </section>\n  ) : (\n    <section>Loading...</section>\n  );\n};\n\nexport default Recipes;\n","export const apiUrlBase = \"https://api.jimsegal.com\";\n// export const apiUrlBase = \"http://localhost:8001\";\n","import React from \"react\";\nimport \"../../App.css\";\n\nconst NotFound = () => <h1>Not Found</h1>;\n\nexport default NotFound;\n","import React, { useState, useEffect } from \"react\";\nimport { apiUrlBase } from \"../../utils\";\n\nimport ReactMarkdown from \"react-markdown\";\nimport axios from \"axios\";\n\nimport \"../../App.css\";\nimport \"./recipe.css\";\nimport NotFound from \"../not-found\";\n\nconst getSlug = ({ pathname, state }) => {\n  if (state && state.slug) {\n    // came from /recipes\n    return state.slug;\n  }\n\n  // didn't come from /recipes\n  const pathNameSplit = pathname.split(\"/\");\n  return pathNameSplit[pathNameSplit.length - 1];\n};\n\nconst Recipe = props => {\n  const [recipe, setRecipe] = useState();\n  const slug = getSlug(props.location);\n\n  useEffect(() => {\n    axios\n      .get(`${apiUrlBase}/recipe/${slug}`)\n      .then(({ data }) => {\n        setRecipe(data);\n      })\n      .catch(({ response }) => {\n        if (response.status === 404) {\n          setRecipe({ status: response.status });\n        }\n      });\n  }, [slug]);\n\n  if (!recipe) {\n    return <section>Loading...</section>;\n  }\n\n  if (recipe.status === 404) {\n    return <NotFound />;\n  }\n\n  const { title, referenceLink, ingredients, directions } = recipe;\n\n  return (\n    <section>\n      <h2>{title}</h2>\n      <small>\n        <a href={referenceLink} target=\"_blank\" rel=\"noopener noreferrer\">\n          Original Reference\n        </a>\n      </small>\n      <h3>Ingredients</h3>\n      <div className=\"ingredients\">\n        <ReactMarkdown source={ingredients} />\n      </div>\n      <h3>Directions</h3>\n      <div className=\"directions\">\n        <ReactMarkdown source={directions} />\n      </div>\n    </section>\n  );\n};\n\nexport default Recipe;\n","import React from \"react\";\nimport \"../../App.css\";\n\nconst Home = () => <h1>Home</h1>;\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Recipes from \"./pages/recipes\";\nimport Recipe from \"./pages/recipe\";\nimport Home from \"./pages/home\";\nimport NotFound from \"./pages/not-found\";\n\nexport default function App() {\n  return (\n    <>\n      <header>\n        <h1>Jim Segal Projects</h1>\n      </header>\n      <Router>\n        <article>\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/recipes\">Recipes</Link>\n              </li>\n            </ul>\n          </nav>\n\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/recipes\" component={Recipes} />\n            <Route path=\"/recipe/:recipeSlug\" component={Recipe} />\n            <Route path=\"*\" component={NotFound} />\n          </Switch>\n        </article>\n      </Router>\n    </>\n  );\n}\n"],"sourceRoot":""}